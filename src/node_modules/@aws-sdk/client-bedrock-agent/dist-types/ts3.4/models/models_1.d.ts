import { DocumentType as __DocumentType } from "@smithy/types";
import {
  AgentKnowledgeBase,
  AgentKnowledgeBaseSummary,
  AgentStatus,
  AgentVersion,
  AgentVersionSummary,
  CustomDocumentIdentifier,
  FlowDefinition,
  FlowValidation,
  KnowledgeBaseState,
  PromptInferenceConfiguration,
  PromptTemplateConfiguration,
  PromptTemplateType,
  S3Location,
} from "./models_0";
export declare const ContentDataSourceType: {
  readonly CUSTOM: "CUSTOM";
  readonly S3: "S3";
};
export type ContentDataSourceType =
  (typeof ContentDataSourceType)[keyof typeof ContentDataSourceType];
export interface DocumentIdentifier {
  dataSourceType: ContentDataSourceType | undefined;
  s3?: S3Location | undefined;
  custom?: CustomDocumentIdentifier | undefined;
}
export interface DeleteKnowledgeBaseDocumentsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  clientToken?: string | undefined;
  documentIdentifiers: DocumentIdentifier[] | undefined;
}
export declare const DocumentStatus: {
  readonly DELETE_IN_PROGRESS: "DELETE_IN_PROGRESS";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly IGNORED: "IGNORED";
  readonly INDEXED: "INDEXED";
  readonly IN_PROGRESS: "IN_PROGRESS";
  readonly METADATA_PARTIALLY_INDEXED: "METADATA_PARTIALLY_INDEXED";
  readonly METADATA_UPDATE_FAILED: "METADATA_UPDATE_FAILED";
  readonly NOT_FOUND: "NOT_FOUND";
  readonly PARTIALLY_INDEXED: "PARTIALLY_INDEXED";
  readonly PENDING: "PENDING";
  readonly STARTING: "STARTING";
};
export type DocumentStatus =
  (typeof DocumentStatus)[keyof typeof DocumentStatus];
export interface KnowledgeBaseDocumentDetail {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  status: DocumentStatus | undefined;
  identifier: DocumentIdentifier | undefined;
  statusReason?: string | undefined;
  updatedAt?: Date | undefined;
}
export interface DeleteKnowledgeBaseDocumentsResponse {
  documentDetails?: KnowledgeBaseDocumentDetail[] | undefined;
}
export interface GetKnowledgeBaseDocumentsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  documentIdentifiers: DocumentIdentifier[] | undefined;
}
export interface GetKnowledgeBaseDocumentsResponse {
  documentDetails?: KnowledgeBaseDocumentDetail[] | undefined;
}
export interface ByteContentDoc {
  mimeType: string | undefined;
  data: Uint8Array | undefined;
}
export interface TextContentDoc {
  data: string | undefined;
}
export declare const InlineContentType: {
  readonly BYTE: "BYTE";
  readonly TEXT: "TEXT";
};
export type InlineContentType =
  (typeof InlineContentType)[keyof typeof InlineContentType];
export interface InlineContent {
  type: InlineContentType | undefined;
  byteContent?: ByteContentDoc | undefined;
  textContent?: TextContentDoc | undefined;
}
export interface CustomS3Location {
  uri: string | undefined;
  bucketOwnerAccountId?: string | undefined;
}
export declare const CustomSourceType: {
  readonly IN_LINE: "IN_LINE";
  readonly S3_LOCATION: "S3_LOCATION";
};
export type CustomSourceType =
  (typeof CustomSourceType)[keyof typeof CustomSourceType];
export interface CustomContent {
  customDocumentIdentifier: CustomDocumentIdentifier | undefined;
  sourceType: CustomSourceType | undefined;
  s3Location?: CustomS3Location | undefined;
  inlineContent?: InlineContent | undefined;
}
export interface S3Content {
  s3Location: S3Location | undefined;
}
export interface DocumentContent {
  dataSourceType: ContentDataSourceType | undefined;
  custom?: CustomContent | undefined;
  s3?: S3Content | undefined;
}
export declare const MetadataValueType: {
  readonly BOOLEAN: "BOOLEAN";
  readonly NUMBER: "NUMBER";
  readonly STRING: "STRING";
  readonly STRING_LIST: "STRING_LIST";
};
export type MetadataValueType =
  (typeof MetadataValueType)[keyof typeof MetadataValueType];
export interface MetadataAttributeValue {
  type: MetadataValueType | undefined;
  numberValue?: number | undefined;
  booleanValue?: boolean | undefined;
  stringValue?: string | undefined;
  stringListValue?: string[] | undefined;
}
export interface MetadataAttribute {
  key: string | undefined;
  value: MetadataAttributeValue | undefined;
}
export declare const MetadataSourceType: {
  readonly IN_LINE_ATTRIBUTE: "IN_LINE_ATTRIBUTE";
  readonly S3_LOCATION: "S3_LOCATION";
};
export type MetadataSourceType =
  (typeof MetadataSourceType)[keyof typeof MetadataSourceType];
export interface DocumentMetadata {
  type: MetadataSourceType | undefined;
  inlineAttributes?: MetadataAttribute[] | undefined;
  s3Location?: CustomS3Location | undefined;
}
export interface KnowledgeBaseDocument {
  metadata?: DocumentMetadata | undefined;
  content: DocumentContent | undefined;
}
export interface IngestKnowledgeBaseDocumentsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  clientToken?: string | undefined;
  documents: KnowledgeBaseDocument[] | undefined;
}
export interface IngestKnowledgeBaseDocumentsResponse {
  documentDetails?: KnowledgeBaseDocumentDetail[] | undefined;
}
export interface ListKnowledgeBaseDocumentsRequest {
  knowledgeBaseId: string | undefined;
  dataSourceId: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListKnowledgeBaseDocumentsResponse {
  documentDetails: KnowledgeBaseDocumentDetail[] | undefined;
  nextToken?: string | undefined;
}
export interface AssociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description: string | undefined;
  knowledgeBaseState?: KnowledgeBaseState | undefined;
}
export interface AssociateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface KendraKnowledgeBaseConfiguration {
  kendraIndexArn: string | undefined;
}
export declare const RedshiftProvisionedAuthType: {
  readonly IAM: "IAM";
  readonly USERNAME: "USERNAME";
  readonly USERNAME_PASSWORD: "USERNAME_PASSWORD";
};
export type RedshiftProvisionedAuthType =
  (typeof RedshiftProvisionedAuthType)[keyof typeof RedshiftProvisionedAuthType];
export interface RedshiftProvisionedAuthConfiguration {
  type: RedshiftProvisionedAuthType | undefined;
  databaseUser?: string | undefined;
  usernamePasswordSecretArn?: string | undefined;
}
export interface RedshiftProvisionedConfiguration {
  clusterIdentifier: string | undefined;
  authConfiguration: RedshiftProvisionedAuthConfiguration | undefined;
}
export declare const RedshiftServerlessAuthType: {
  readonly IAM: "IAM";
  readonly USERNAME_PASSWORD: "USERNAME_PASSWORD";
};
export type RedshiftServerlessAuthType =
  (typeof RedshiftServerlessAuthType)[keyof typeof RedshiftServerlessAuthType];
export interface RedshiftServerlessAuthConfiguration {
  type: RedshiftServerlessAuthType | undefined;
  usernamePasswordSecretArn?: string | undefined;
}
export interface RedshiftServerlessConfiguration {
  workgroupArn: string | undefined;
  authConfiguration: RedshiftServerlessAuthConfiguration | undefined;
}
export declare const RedshiftQueryEngineType: {
  readonly PROVISIONED: "PROVISIONED";
  readonly SERVERLESS: "SERVERLESS";
};
export type RedshiftQueryEngineType =
  (typeof RedshiftQueryEngineType)[keyof typeof RedshiftQueryEngineType];
export interface RedshiftQueryEngineConfiguration {
  type: RedshiftQueryEngineType | undefined;
  serverlessConfiguration?: RedshiftServerlessConfiguration | undefined;
  provisionedConfiguration?: RedshiftProvisionedConfiguration | undefined;
}
export interface CuratedQuery {
  naturalLanguage: string | undefined;
  sql: string | undefined;
}
export declare const IncludeExclude: {
  readonly EXCLUDE: "EXCLUDE";
  readonly INCLUDE: "INCLUDE";
};
export type IncludeExclude =
  (typeof IncludeExclude)[keyof typeof IncludeExclude];
export interface QueryGenerationColumn {
  name?: string | undefined;
  description?: string | undefined;
  inclusion?: IncludeExclude | undefined;
}
export interface QueryGenerationTable {
  name: string | undefined;
  description?: string | undefined;
  inclusion?: IncludeExclude | undefined;
  columns?: QueryGenerationColumn[] | undefined;
}
export interface QueryGenerationContext {
  tables?: QueryGenerationTable[] | undefined;
  curatedQueries?: CuratedQuery[] | undefined;
}
export interface QueryGenerationConfiguration {
  executionTimeoutSeconds?: number | undefined;
  generationContext?: QueryGenerationContext | undefined;
}
export interface RedshiftQueryEngineAwsDataCatalogStorageConfiguration {
  tableNames: string[] | undefined;
}
export interface RedshiftQueryEngineRedshiftStorageConfiguration {
  databaseName: string | undefined;
}
export declare const RedshiftQueryEngineStorageType: {
  readonly AWS_DATA_CATALOG: "AWS_DATA_CATALOG";
  readonly REDSHIFT: "REDSHIFT";
};
export type RedshiftQueryEngineStorageType =
  (typeof RedshiftQueryEngineStorageType)[keyof typeof RedshiftQueryEngineStorageType];
export interface RedshiftQueryEngineStorageConfiguration {
  type: RedshiftQueryEngineStorageType | undefined;
  awsDataCatalogConfiguration?:
    | RedshiftQueryEngineAwsDataCatalogStorageConfiguration
    | undefined;
  redshiftConfiguration?:
    | RedshiftQueryEngineRedshiftStorageConfiguration
    | undefined;
}
export interface RedshiftConfiguration {
  storageConfigurations: RedshiftQueryEngineStorageConfiguration[] | undefined;
  queryEngineConfiguration: RedshiftQueryEngineConfiguration | undefined;
  queryGenerationConfiguration?: QueryGenerationConfiguration | undefined;
}
export declare const QueryEngineType: {
  readonly REDSHIFT: "REDSHIFT";
};
export type QueryEngineType =
  (typeof QueryEngineType)[keyof typeof QueryEngineType];
export interface SqlKnowledgeBaseConfiguration {
  type: QueryEngineType | undefined;
  redshiftConfiguration?: RedshiftConfiguration | undefined;
}
export declare const KnowledgeBaseType: {
  readonly KENDRA: "KENDRA";
  readonly SQL: "SQL";
  readonly VECTOR: "VECTOR";
};
export type KnowledgeBaseType =
  (typeof KnowledgeBaseType)[keyof typeof KnowledgeBaseType];
export declare const EmbeddingDataType: {
  readonly BINARY: "BINARY";
  readonly FLOAT32: "FLOAT32";
};
export type EmbeddingDataType =
  (typeof EmbeddingDataType)[keyof typeof EmbeddingDataType];
export interface BedrockEmbeddingModelConfiguration {
  dimensions?: number | undefined;
  embeddingDataType?: EmbeddingDataType | undefined;
}
export interface EmbeddingModelConfiguration {
  bedrockEmbeddingModelConfiguration?:
    | BedrockEmbeddingModelConfiguration
    | undefined;
}
export declare const SupplementalDataStorageLocationType: {
  readonly S3: "S3";
};
export type SupplementalDataStorageLocationType =
  (typeof SupplementalDataStorageLocationType)[keyof typeof SupplementalDataStorageLocationType];
export interface SupplementalDataStorageLocation {
  type: SupplementalDataStorageLocationType | undefined;
  s3Location?: S3Location | undefined;
}
export interface SupplementalDataStorageConfiguration {
  storageLocations: SupplementalDataStorageLocation[] | undefined;
}
export interface VectorKnowledgeBaseConfiguration {
  embeddingModelArn: string | undefined;
  embeddingModelConfiguration?: EmbeddingModelConfiguration | undefined;
  supplementalDataStorageConfiguration?:
    | SupplementalDataStorageConfiguration
    | undefined;
}
export interface KnowledgeBaseConfiguration {
  type: KnowledgeBaseType | undefined;
  vectorKnowledgeBaseConfiguration?:
    | VectorKnowledgeBaseConfiguration
    | undefined;
  kendraKnowledgeBaseConfiguration?:
    | KendraKnowledgeBaseConfiguration
    | undefined;
  sqlKnowledgeBaseConfiguration?: SqlKnowledgeBaseConfiguration | undefined;
}
export interface MongoDbAtlasFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface MongoDbAtlasConfiguration {
  endpoint: string | undefined;
  databaseName: string | undefined;
  collectionName: string | undefined;
  vectorIndexName: string | undefined;
  credentialsSecretArn: string | undefined;
  fieldMapping: MongoDbAtlasFieldMapping | undefined;
  endpointServiceName?: string | undefined;
  textIndexName?: string | undefined;
}
export interface NeptuneAnalyticsFieldMapping {
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface NeptuneAnalyticsConfiguration {
  graphArn: string | undefined;
  fieldMapping: NeptuneAnalyticsFieldMapping | undefined;
}
export interface OpenSearchManagedClusterFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface OpenSearchManagedClusterConfiguration {
  domainEndpoint: string | undefined;
  domainArn: string | undefined;
  vectorIndexName: string | undefined;
  fieldMapping: OpenSearchManagedClusterFieldMapping | undefined;
}
export interface OpenSearchServerlessFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface OpenSearchServerlessConfiguration {
  collectionArn: string | undefined;
  vectorIndexName: string | undefined;
  fieldMapping: OpenSearchServerlessFieldMapping | undefined;
}
export interface PineconeFieldMapping {
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface PineconeConfiguration {
  connectionString: string | undefined;
  credentialsSecretArn: string | undefined;
  namespace?: string | undefined;
  fieldMapping: PineconeFieldMapping | undefined;
}
export interface RdsFieldMapping {
  primaryKeyField: string | undefined;
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
  customMetadataField?: string | undefined;
}
export interface RdsConfiguration {
  resourceArn: string | undefined;
  credentialsSecretArn: string | undefined;
  databaseName: string | undefined;
  tableName: string | undefined;
  fieldMapping: RdsFieldMapping | undefined;
}
export interface RedisEnterpriseCloudFieldMapping {
  vectorField: string | undefined;
  textField: string | undefined;
  metadataField: string | undefined;
}
export interface RedisEnterpriseCloudConfiguration {
  endpoint: string | undefined;
  vectorIndexName: string | undefined;
  credentialsSecretArn: string | undefined;
  fieldMapping: RedisEnterpriseCloudFieldMapping | undefined;
}
export declare const KnowledgeBaseStorageType: {
  readonly MONGO_DB_ATLAS: "MONGO_DB_ATLAS";
  readonly NEPTUNE_ANALYTICS: "NEPTUNE_ANALYTICS";
  readonly OPENSEARCH_MANAGED_CLUSTER: "OPENSEARCH_MANAGED_CLUSTER";
  readonly OPENSEARCH_SERVERLESS: "OPENSEARCH_SERVERLESS";
  readonly PINECONE: "PINECONE";
  readonly RDS: "RDS";
  readonly REDIS_ENTERPRISE_CLOUD: "REDIS_ENTERPRISE_CLOUD";
};
export type KnowledgeBaseStorageType =
  (typeof KnowledgeBaseStorageType)[keyof typeof KnowledgeBaseStorageType];
export interface StorageConfiguration {
  type: KnowledgeBaseStorageType | undefined;
  opensearchServerlessConfiguration?:
    | OpenSearchServerlessConfiguration
    | undefined;
  opensearchManagedClusterConfiguration?:
    | OpenSearchManagedClusterConfiguration
    | undefined;
  pineconeConfiguration?: PineconeConfiguration | undefined;
  redisEnterpriseCloudConfiguration?:
    | RedisEnterpriseCloudConfiguration
    | undefined;
  rdsConfiguration?: RdsConfiguration | undefined;
  mongoDbAtlasConfiguration?: MongoDbAtlasConfiguration | undefined;
  neptuneAnalyticsConfiguration?: NeptuneAnalyticsConfiguration | undefined;
}
export interface CreateKnowledgeBaseRequest {
  clientToken?: string | undefined;
  name: string | undefined;
  description?: string | undefined;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration?: StorageConfiguration | undefined;
  tags?: Record<string, string> | undefined;
}
export declare const KnowledgeBaseStatus: {
  readonly ACTIVE: "ACTIVE";
  readonly CREATING: "CREATING";
  readonly DELETE_UNSUCCESSFUL: "DELETE_UNSUCCESSFUL";
  readonly DELETING: "DELETING";
  readonly FAILED: "FAILED";
  readonly UPDATING: "UPDATING";
};
export type KnowledgeBaseStatus =
  (typeof KnowledgeBaseStatus)[keyof typeof KnowledgeBaseStatus];
export interface KnowledgeBase {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  knowledgeBaseArn: string | undefined;
  description?: string | undefined;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration?: StorageConfiguration | undefined;
  status: KnowledgeBaseStatus | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  failureReasons?: string[] | undefined;
}
export interface CreateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface DeleteKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface DeleteKnowledgeBaseResponse {
  knowledgeBaseId: string | undefined;
  status: KnowledgeBaseStatus | undefined;
}
export interface DisassociateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface DisassociateAgentKnowledgeBaseResponse {}
export interface GetAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
}
export interface GetAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface GetKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
}
export interface GetKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface ListAgentKnowledgeBasesRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListAgentKnowledgeBasesResponse {
  agentKnowledgeBaseSummaries: AgentKnowledgeBaseSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface ListKnowledgeBasesRequest {
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface KnowledgeBaseSummary {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string | undefined;
  status: KnowledgeBaseStatus | undefined;
  updatedAt: Date | undefined;
}
export interface ListKnowledgeBasesResponse {
  knowledgeBaseSummaries: KnowledgeBaseSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdateAgentKnowledgeBaseRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  knowledgeBaseId: string | undefined;
  description?: string | undefined;
  knowledgeBaseState?: KnowledgeBaseState | undefined;
}
export interface UpdateAgentKnowledgeBaseResponse {
  agentKnowledgeBase: AgentKnowledgeBase | undefined;
}
export interface UpdateKnowledgeBaseRequest {
  knowledgeBaseId: string | undefined;
  name: string | undefined;
  description?: string | undefined;
  roleArn: string | undefined;
  knowledgeBaseConfiguration: KnowledgeBaseConfiguration | undefined;
  storageConfiguration?: StorageConfiguration | undefined;
}
export interface UpdateKnowledgeBaseResponse {
  knowledgeBase: KnowledgeBase | undefined;
}
export interface PromptAgentResource {
  agentIdentifier: string | undefined;
}
export type PromptGenAiResource =
  | PromptGenAiResource.AgentMember
  | PromptGenAiResource.$UnknownMember;
export declare namespace PromptGenAiResource {
  interface AgentMember {
    agent: PromptAgentResource;
    $unknown?: never;
  }
  interface $UnknownMember {
    agent?: never;
    $unknown: [string, any];
  }
  interface Visitor<T> {
    agent: (value: PromptAgentResource) => T;
    _: (name: string, value: any) => T;
  }
  const visit: <T>(value: PromptGenAiResource, visitor: Visitor<T>) => T;
}
export interface PromptMetadataEntry {
  key: string | undefined;
  value: string | undefined;
}
export interface PromptVariant {
  name: string | undefined;
  templateType: PromptTemplateType | undefined;
  templateConfiguration: PromptTemplateConfiguration | undefined;
  modelId?: string | undefined;
  inferenceConfiguration?: PromptInferenceConfiguration | undefined;
  metadata?: PromptMetadataEntry[] | undefined;
  additionalModelRequestFields?: __DocumentType | undefined;
  genAiResource?: PromptGenAiResource | undefined;
}
export interface CreatePromptRequest {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  clientToken?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreatePromptResponse {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface CreatePromptVersionRequest {
  promptIdentifier: string | undefined;
  description?: string | undefined;
  clientToken?: string | undefined;
  tags?: Record<string, string> | undefined;
}
export interface CreatePromptVersionResponse {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface DeletePromptRequest {
  promptIdentifier: string | undefined;
  promptVersion?: string | undefined;
}
export interface DeletePromptResponse {
  id: string | undefined;
  version?: string | undefined;
}
export interface GetPromptRequest {
  promptIdentifier: string | undefined;
  promptVersion?: string | undefined;
}
export interface GetPromptResponse {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListPromptsRequest {
  promptIdentifier?: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface PromptSummary {
  name: string | undefined;
  description?: string | undefined;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListPromptsResponse {
  promptSummaries: PromptSummary[] | undefined;
  nextToken?: string | undefined;
}
export interface UpdatePromptRequest {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  promptIdentifier: string | undefined;
}
export interface UpdatePromptResponse {
  name: string | undefined;
  description?: string | undefined;
  customerEncryptionKeyArn?: string | undefined;
  defaultVariant?: string | undefined;
  variants?: PromptVariant[] | undefined;
  id: string | undefined;
  arn: string | undefined;
  version: string | undefined;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
}
export interface ListTagsForResourceRequest {
  resourceArn: string | undefined;
}
export interface ListTagsForResourceResponse {
  tags?: Record<string, string> | undefined;
}
export interface TagResourceRequest {
  resourceArn: string | undefined;
  tags: Record<string, string> | undefined;
}
export interface TagResourceResponse {}
export interface UntagResourceRequest {
  resourceArn: string | undefined;
  tagKeys: string[] | undefined;
}
export interface UntagResourceResponse {}
export interface ValidateFlowDefinitionRequest {
  definition: FlowDefinition | undefined;
}
export interface ValidateFlowDefinitionResponse {
  validations: FlowValidation[] | undefined;
}
export interface DeleteAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
  skipResourceInUseCheck?: boolean | undefined;
}
export interface DeleteAgentVersionResponse {
  agentId: string | undefined;
  agentVersion: string | undefined;
  agentStatus: AgentStatus | undefined;
}
export interface GetAgentVersionRequest {
  agentId: string | undefined;
  agentVersion: string | undefined;
}
export interface GetAgentVersionResponse {
  agentVersion: AgentVersion | undefined;
}
export interface ListAgentVersionsRequest {
  agentId: string | undefined;
  maxResults?: number | undefined;
  nextToken?: string | undefined;
}
export interface ListAgentVersionsResponse {
  agentVersionSummaries: AgentVersionSummary[] | undefined;
  nextToken?: string | undefined;
}
export declare const ByteContentDocFilterSensitiveLog: (
  obj: ByteContentDoc
) => any;
export declare const TextContentDocFilterSensitiveLog: (
  obj: TextContentDoc
) => any;
export declare const InlineContentFilterSensitiveLog: (
  obj: InlineContent
) => any;
export declare const CustomContentFilterSensitiveLog: (
  obj: CustomContent
) => any;
export declare const DocumentContentFilterSensitiveLog: (
  obj: DocumentContent
) => any;
export declare const MetadataAttributeValueFilterSensitiveLog: (
  obj: MetadataAttributeValue
) => any;
export declare const MetadataAttributeFilterSensitiveLog: (
  obj: MetadataAttribute
) => any;
export declare const DocumentMetadataFilterSensitiveLog: (
  obj: DocumentMetadata
) => any;
export declare const KnowledgeBaseDocumentFilterSensitiveLog: (
  obj: KnowledgeBaseDocument
) => any;
export declare const IngestKnowledgeBaseDocumentsRequestFilterSensitiveLog: (
  obj: IngestKnowledgeBaseDocumentsRequest
) => any;
export declare const QueryGenerationContextFilterSensitiveLog: (
  obj: QueryGenerationContext
) => any;
export declare const QueryGenerationConfigurationFilterSensitiveLog: (
  obj: QueryGenerationConfiguration
) => any;
export declare const RedshiftConfigurationFilterSensitiveLog: (
  obj: RedshiftConfiguration
) => any;
export declare const SqlKnowledgeBaseConfigurationFilterSensitiveLog: (
  obj: SqlKnowledgeBaseConfiguration
) => any;
export declare const KnowledgeBaseConfigurationFilterSensitiveLog: (
  obj: KnowledgeBaseConfiguration
) => any;
export declare const NeptuneAnalyticsConfigurationFilterSensitiveLog: (
  obj: NeptuneAnalyticsConfiguration
) => any;
export declare const OpenSearchManagedClusterConfigurationFilterSensitiveLog: (
  obj: OpenSearchManagedClusterConfiguration
) => any;
export declare const StorageConfigurationFilterSensitiveLog: (
  obj: StorageConfiguration
) => any;
export declare const CreateKnowledgeBaseRequestFilterSensitiveLog: (
  obj: CreateKnowledgeBaseRequest
) => any;
export declare const KnowledgeBaseFilterSensitiveLog: (
  obj: KnowledgeBase
) => any;
export declare const CreateKnowledgeBaseResponseFilterSensitiveLog: (
  obj: CreateKnowledgeBaseResponse
) => any;
export declare const GetKnowledgeBaseResponseFilterSensitiveLog: (
  obj: GetKnowledgeBaseResponse
) => any;
export declare const UpdateKnowledgeBaseRequestFilterSensitiveLog: (
  obj: UpdateKnowledgeBaseRequest
) => any;
export declare const UpdateKnowledgeBaseResponseFilterSensitiveLog: (
  obj: UpdateKnowledgeBaseResponse
) => any;
export declare const PromptAgentResourceFilterSensitiveLog: (
  obj: PromptAgentResource
) => any;
export declare const PromptGenAiResourceFilterSensitiveLog: (
  obj: PromptGenAiResource
) => any;
export declare const PromptMetadataEntryFilterSensitiveLog: (
  obj: PromptMetadataEntry
) => any;
export declare const PromptVariantFilterSensitiveLog: (
  obj: PromptVariant
) => any;
export declare const CreatePromptRequestFilterSensitiveLog: (
  obj: CreatePromptRequest
) => any;
export declare const CreatePromptResponseFilterSensitiveLog: (
  obj: CreatePromptResponse
) => any;
export declare const CreatePromptVersionResponseFilterSensitiveLog: (
  obj: CreatePromptVersionResponse
) => any;
export declare const GetPromptResponseFilterSensitiveLog: (
  obj: GetPromptResponse
) => any;
export declare const UpdatePromptRequestFilterSensitiveLog: (
  obj: UpdatePromptRequest
) => any;
export declare const UpdatePromptResponseFilterSensitiveLog: (
  obj: UpdatePromptResponse
) => any;
export declare const ValidateFlowDefinitionRequestFilterSensitiveLog: (
  obj: ValidateFlowDefinitionRequest
) => any;
export declare const ValidateFlowDefinitionResponseFilterSensitiveLog: (
  obj: ValidateFlowDefinitionResponse
) => any;
export declare const GetAgentVersionResponseFilterSensitiveLog: (
  obj: GetAgentVersionResponse
) => any;
